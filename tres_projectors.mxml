<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import ImageStuff.ImageStuff;
			
			import flash.display.*;
			import flash.media.*;
			
			import mx.collections.ArrayCollection;
			import mx.utils.ObjectUtil;
			
			import structuredlight.*;
			
			//for loading the camera
			public var cam:Camera
			//public var vid:Video
			public var bmd:BitmapData
			public var current_refresher:Timer 

			
			private var fileO:MapFileOpener = new MapFileOpener()
			
			
			public var cam_resolutions:ArrayCollection = new ArrayCollection(
				[ {label:"640 x 480", width:640, height:480}, 
					{label:"320 x 240", width:320, height:240}, 
					{label:"160 x 120", width:160, height:120} ]
			)
			
			
			public function load_camera(e:Event=null):void
			{
				cam = Camera.getCamera( camlist.selectedIndex.toString() )
				
				var wid:int = 320
				var hei:int = 240
				if(resolution_form){
					wid = resolution_form.selectedItem.width
					hei = resolution_form.selectedItem.height
					cam.setMode( wid, hei, 60)
					vidDisp.width = wid
					vidDisp.height = hei
				}
				vidDisp.attachCamera( cam)
			}
			
			//
			//	SPEDIFIC TO 3 PROJECTORS
			//
		
			public var sbList:Array = new Array();
			public var projector_count:int ;
			
			//STATES
			private var state:Array = ["INIT", "CALLIBRATE" , "COMBINE" ,"DONE"];
			private var current_state:int = 0;
			private var currentProj:int = 0;
			private var _timeout:int = 0
			
			public function callib_3( projectors:int = 3, timeout:int = 300)
			{
				switch( state[current_state] )
				{
					case "INIT":
						_timeout = timeout ;
						projector_count = projectors;
						currentProj = 0;
						sbList = new Array();
						current_state ++;
						callib_3();
						
						break;
					case "CALLIBRATE":
						if( currentProj < projector_count)
						{
							//make mask image here
							//make left rectangle
							var s:Shape = new Shape();
							s.graphics.beginFill( 0xff000000, 1.0);
							s.graphics.drawRect( 0 ,0, (currentProj / projector_count )* ( stage.width ) , stage.height);
							//make right rectangle
							var w:Shape = new Shape();
							w.graphics.beginFill( 0xff000000, 1.0);
							w.graphics.drawRect( ((currentProj + 1) / projector_count) * stage.width , 0, stage.width, stage.height);
							//make image for mask
							var bmd:BitmapData = new BitmapData( stage.width, stage.height, true, 0x00000000 );
							bmd.draw( s );
							bmd.draw( w);
							var mascara:Bitmap = new Bitmap( bmd);
							
							
							// start callibration and add it to sblist
							var sb1:Sandbox3 = new Sandbox3( stage, cam, 256, 96);
							sb1.TPTimeout = _timeout ;
							sb1.state_rate = _timeout ;
							sbList.push(sb1);
							sb1.callibrate();
							sb1.addEventListener( "CALLIBRATE_DONE", callib_3 );
							
							
							//display mask image here
							if( stage.getChildByName( "mascara") )
							{
								stage.removeChild( stage.getChildByName( "mascara") );
								stage.addChild( mascara ).name = "mascara";		
							}
							else
							{
								stage.addChild( mascara ).name = "mascara";	
							}
							
							
							currentProj++ ;
						}
						else
						{
							//remove mask image
							stage.removeChild( stage.getChildByName( "mascara") );
							
							current_state++ ;
							callib_3();
						}
					
						
						break;
					case "COMBINE":
						
						
						current_state++ ;
						callib_3();
						break;
					case "DONE":
						current_state = 0;
						currentProj = 0;
						break;
				}			
			}
			
			//TAKE A GAUSSIAN SAMPLE OF A POINT
			//   this is really slow but gives good results
			//   maybe a faster one will be used in the future.
			//		returns a score of how edge like it is. 0 is the best. 
			public function sampleSpot( sb:Sandbox3, p:Point, radius:int = 2):Number
			{
				//_log.text += "\n samplePoint called";
				//var sb:Sandbox3 = sbList[0];
				
				if ( !sb.graymap.getMapXY(p.x, p.y) || sb.graymap.getMapXY(p.x , p.y).x <= 0 || sb.graymap.getMapXY( p.x, p.y).y <= 0 ){
					return Number(uint.MAX_VALUE);
				}
				//do not take edges
				// 		TODO: change this to something better
				if( p.x <= radius || p.x > sb.graymap.width() - radius || p.y <= radius || p.y > sb.graymap.height() - radius)
				{
					return Number(uint.MAX_VALUE);
				}
				
				
				var dist:Number = 0.0;
				var distances:Number = 0.0;
				var averageX:Number = 0.0;
				var averageY:Number = 0.0;
				for( var x:int = - radius ; x <= radius; x++)
				{
					for( var y:int = - radius; y <=  radius; y++)
					{
						dist = 1 / Math.pow( Math.E, (x*x + y*y)/( 2 * radius) ); 
						 
						distances += dist;
						averageX += dist * ( sb.graymap.getMapXY( p.x + x, p.y + y).x  );
						averageY += dist * (sb.graymap.getMapXY( p.x + x, p.y + y).y  ) ;
					}
					
				}
				averageX = averageX / distances;
				averageY = averageY / distances;

				var score:Number = Math.abs( averageX - sb.graymap.getMapXY( p.x, p.y).x) ;
				score += Math.abs( averageY - sb.graymap.getMapXY( p.x, p.y).y );
				
				score = Math.abs( score );
				return score;
				
			}
			
			public function stitcher( radius:int ):CameraProjecterMap2
			{
				_log.text += "stitcher called";
		
				//get new camera map that is the right size
				var result:CameraProjecterMap2 = new CameraProjecterMap2();
				result = sbList[0].graymap.clone() ;
				_log.text += ". cloned"
				
				
				var p:Point;
				var best_n:int;
				var best_score:Number;
				
				for(var x:int = 0 ; x < result.width() ; x++)
				{
					for( var y:int = 0 ; y < result.height() ; y++)
					{
						p = new Point(x,y);
						best_n = 0;
						best_score = sampleSpot( sbList[0], p, radius)
						//find map with best score
						for( var n:int = 1 ; n < sbList.length ; n++)
						{
							var score:Number = sampleSpot(sbList[ n ], p , radius);
							if( score < best_score){
								best_score = score;
								best_n = n;
							} 
						}
						//take point from best map
						
						result.map[x][y] = sbList[ best_n ].graymap.getMapXY(x,y);
						
					}
				}
				_log.text += "\n stitcher done";
				return result;
			}
			
			//STITCHER2
			//
			public function stitcher2( threshold:uint = 0xff777777)
			{
				_log.text += " stitcher2 called";
				
				// FIND THE ACTIVE AREAS
				// find the differences between the black and whit frames
				//
				var diffList:Array = new Array()
				for( var n2:int = 0 ; n2 < sbList.length ; n2++)
				{
					_log.text += " \n sb 1 differenceing";
					var sb:Sandbox3 = sbList[n2];

					diffList.push( differences( sb, threshold ) );
				}
				
				
				
				
				//
				// initaialize a new map
				//	
				var result:CameraProjecterMap2 = new CameraProjecterMap2();
				result = sbList[0].graymap.clone() ;

				
				
				
				//
				// go through all of the sandbox3's and put a point in the result if the area is active.
				//		if two active spots overlap, take the brightest.
				for( var x:int = 0 ; x < result.width() ; x++ )
				{
					for( var y:int = 0 ; y < result.height() ; y++ )
					{
						var found:int = -1;
						var brightest:uint = 0;
						for( var n:int = 0 ; n < diffList.length ; n++)
						{
							var b:BitmapData = diffList[n];	
							var pixel:uint = b.getPixel( x, y);
							if( pixel > 0x000000 )
							{
								if( pixel > brightest )
								{
									result.map[x][y] = sbList[n].graymap.getMapXY(x,y); 
									found = n ;
									brightest = uint( pixel); 
								}
							}
							if( found < 0)
							{
								result.map[x][y] = new Point(-1,-1);
							}
						}
					}
				}
					
					
				_img.source = new Bitmap( result.makeGrayArrayImage() );	
				_log.text += "\n stitcher2 done";
			}
			public function differences( sb:Sandbox3 , threshold:uint = 0xff444444):BitmapData
			{
			
				var tmp:ImageStuff = new ImageStuff();
				var mergedB:BitmapData = tmp.mergeArray( sb.BFrames );
				var mergedW:BitmapData = tmp.mergeArray( sb.WFrames );
				//_log.text += "merged b length" + sb.BFrames.length ;
				//_log.text += "  merger w length" + sb.WFrames.length ;
				
				var difference:BitmapData = mergedB.clone();
				
				difference.draw( mergedW, new Matrix() , new ColorTransform(), BlendMode.DIFFERENCE); 
				difference.threshold( difference, difference.rect, new Point(0,0), "<=" , threshold, 0xff000000);
				//difference.threshold( difference, difference.rect, new Point(0,0), ">=", threshold, 0xffffffff);
				
				return difference;
				
			}
			
			
			
			
			
			//
			// testing related
			//
			public function showImage( n:int = 0)
			{
				if( n >= projector_count)
					return;
				
				var sb:Sandbox3 = sbList[n];
			
				_img.source = new Bitmap( sb.makeImage() );
				
			}
			public function mouseClick(e:MouseEvent = null)
			{
			_log.text += " mouse pos :" + new Point( e.localX, e.localY).toString() ;
			_log.text += " sample score : " + sampleSpot(sbList[0],  new Point(e.localX, e.localY), 3 );
			//sampleSpot( new Point(2,2));
			}
			function showEdges( n:int = 0)
			{
				var sb:Sandbox3 = sbList[n];
				
				var result:BitmapData = new BitmapData( sb.graymap.width(), sb.graymap.height());
				for( var x:int=0 ; x< sb.graymap.width(); x++)
				{
					for( var y:int=0 ; y < sb.graymap.height(); y++)
					{
						var num:Number = sampleSpot( sb, new Point(x,y), 4 );
						var color:uint = uint(num);
						result.setPixel( x,y, color);
					}
				}
				_img.source = new Bitmap( result);
			}
			
			public function testStitcher()
			{
				var stitched:CameraProjecterMap2 = stitcher( 2);
				_img.source = new Bitmap(stitched.makeGrayArrayImage());
			}
			public function showMask( n:int )
			{
				_img.source = new Bitmap(  differences( sbList[n] , 0xff000000 + 0x010101 * _thresh_hold.value ) );
			}
			public function saveStitchedCamMap()
			{
				
			}
			
		]]>
	</fx:Script>
	
		<mx:Text text="note: bug. this video must be displayed at least once in order for the video to start capturing" x="39" y="294"/>
		<mx:VideoDisplay width="320" height="240" 
						 id="vidDisp" 
						 visible="true"
						 creationComplete="load_camera( event)"  x="10" y="37"/>
		<mx:Text text="Choose a camera. there are {camlist.dataProvider.length} camera(s)"  x="14" y="14"/>
		<mx:Form x="383" y="23" width="310" height="208">
			
			<mx:ComboBox id="camlist"
						 dataProvider="{Camera.names}"
						 width="200"	
						 selectedIndex="1" 
						 change="load_camera(event)"
						 x="408" y="39"/>
			<s:ComboBox width="188" dataProvider="{cam_resolutions}" selectedIndex="1" id="resolution_form" x="408" y="65"  change="load_camera(event)"/>
	</mx:Form>
		<s:Button x="66" y="359" label="  projector callib" click="callib_3(_number_of_projectors.value, 400)"/>

		<s:NumericStepper x="10" y="360" minimum="1" maximum="10" stepSize="1" id="_number_of_projectors" value="3"/>
		<s:TextArea x="639" y="37" width="283" id="_log" />
		<s:NumericStepper x="118" y="388" id="_sbImage_num" minimum="0" maximum="10" stepSize="1"/>
		<s:Button x="14" y="390" label="show Image" click="showImage( _sbImage_num.value)"/>
		<s:Button x="180" y="390" label="edge score" click="showEdges( _sbImage_num.value);"/>
		<s:Button x="14" y="419" label="stitch" click="testStitcher()"/>
		<s:Button x="14" y="448" label="stitcher2" click="stitcher2( 0xff000000 + 0x010101 * _thresh_hold.value )" />
	<mx:Image id="_img" click="mouseClick( event)" x="385" y="244"/>
	<s:HSlider x="89" y="462" minimum="0" maximum="255" stepSize="1" value="88" id="_thresh_hold" change="_thresh_label.text = ( 0xff000000 + _thresh_hold.value * 0x010101).toString( 16)  "/>
	<s:Label x="92" y="448" text="threshold" width="59" />
	<s:Label x="159" y="448" id="_thresh_label"/>
	<s:Button x="264" y="391" label="show Mask" click="showMask( _sbImage_num.value )"/>
	
</s:Application>
