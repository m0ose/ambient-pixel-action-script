<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.graphics.codec.PNGEncoder;
			
			import structuredlight.CameraProjecterMap2;
			import structuredlight.Displacement24;
			import structuredlight.MapFileOpener;
			import structuredlight.ProjectorMap;
			import structuredlight.Reversemap;
			
			var fileO:MapFileOpener = new MapFileOpener;
			var rev_map:Reversemap;
			var cam_map:CameraProjecterMap2;
			var proj_map:ProjectorMap;
			var bendyCamProj:Displacement24;
			var bendyProjCam:Displacement24;
			
			var filts:Array ; // filters
			
			
			
			public function quickBMP(w:int = 640, h:int=480):BitmapData
			{
				if( _img.width)
				{
					w = _img.width;
					h = _img.height;
				}
				var res:BitmapData = new BitmapData( w,h, false, 0x00ff00)
				
				var s:Shape = new Shape()
				//big lines
				s.graphics.lineStyle( 12, 0xff0000)
				
				for( var x:int = 0;  x < w ; x = x + 45)
				{
					s.graphics.moveTo( x,0);
					s.graphics.lineTo( x, res.height);
				}
				s.graphics.lineStyle( 12, 0x0000ff)
				for( var y:int=0; y < h ; y = y + 45)
				{
					s.graphics.moveTo(0, y);
					s.graphics.lineTo( res.width, y);
				}
				//little lines
				s.graphics.lineStyle( 2, 0x0000ff)
				for( var y:int=0; y < h ; y = y + 15)
				{
					s.graphics.moveTo(0, y);
					s.graphics.lineTo( res.width, y);
				}
				s.graphics.lineStyle( 2, 0xff0000);
				for( var x:int = 0;  x < w ; x = x + 15)
				{
					s.graphics.moveTo( x,0);
					s.graphics.lineTo( x, res.height);
				}
				res.draw( s);
				return res;
			}
			
			
			function load()
			{
				fileO.importMap()
				fileO.addEventListener( "loaded Map", loaded)
			}
			function loaded(e:Event = null)
			{
				//rev_map = new Reversemap( fileO.cam_map)
				cam_map = fileO.cam_map
			}
			
			function bendCamProj()
			{	_img.source = new Bitmap( quickBMP( stage.width, stage.height ) );
				bendyCamProj = new Displacement24();
				bendyCamProj.fromCamProjMap( cam_map);
				filts = [ bendyCamProj.filter ];
				_img.filters = filts ;
				doubleProjecting = false;
			
			}
			
			function bendProjCam()
			{_img.source = new Bitmap( quickBMP( stage.width, stage.height ) );
				bendyProjCam = new Displacement24();
				bendyProjCam.fromProjectorMap( proj_map);
				filts = [ bendyProjCam.filter ];
				_img.filters = filts;
				doubleProjecting = false;
				
			}
			
			function doubleProj()
			{
				
				bendyCamProj.offsetX = 0;
				bendyCamProj.offsetY = 0;
				bendyCamProj.zoom = 1;		
				bendyCamProj.init();
				
				filts = [ bendyProjCam.filter, bendyCamProj.filter ];
				_img.filters = filts;
				
				doubleProjecting = true;
			}
			
			
			public function interpolate()
			{
				 
				proj_map = new ProjectorMap( cam_map);
				proj_map.interpolate( _denoise.selected , _percentToKeep.value );
				filts = [];
				_img.filters = filts;
				_img.source = new Bitmap( proj_map.drawProj_map() );
				
			}
		
			var doubleProjecting:Boolean = false;
			function formChange( )
			{
				var zoom:Number = _zoom.value;
				var offsetX:Number = _offsetX.value;
				var offsetY:Number = _offsetY.value;
				if( !doubleProjecting)
				{
					if(bendyCamProj)
					{
						bendyCamProj.offsetX = offsetX;
						bendyCamProj.offsetY = offsetY;
						bendyCamProj.zoom = zoom;		
						bendyCamProj.init();
					}
				}
				if( bendyProjCam )
				{
					bendyProjCam.offsetX = offsetX;
					bendyProjCam.offsetY = offsetY;
					bendyProjCam.zoom = zoom;
					bendyProjCam.init();
				}
				
				_img.filters = filts;
			}
			import flash.filters.BlurFilter ;
			function blurProjMap()
			{
				if( bendyProjCam )
				{
					//var f:BlurFilter = new BlurFilter(4.0, 4.0, 10.0);
					var f:BlurFilter =  new BlurFilter(3.0, 3.0, 100);
					bendyProjCam.mapX.applyFilter( bendyProjCam.mapX , bendyProjCam.mapX.rect , new Point(0,0) ,f);
					bendyProjCam.mapY.applyFilter( bendyProjCam.mapY , bendyProjCam.mapY.rect , new Point(0,0) ,f);
				 	bendyProjCam.init() ;
					
					filts = [ bendyProjCam.filter ];
					_img.filters = filts;
				}
				
			}
	
			public function drawTriangles():void
			{
				_img2.source = new Bitmap( proj_map.drawTriangles() );
				
				_img2.alpha = 0.5 ; 
			}
			public function saveX()
			{
				var f:FileReference = new FileReference();
				
				
				var encoderX:PNGEncoder = new PNGEncoder()
				var bytesX:ByteArray = encoderX.encode( bendyProjCam.mapX);
				
				
		
				//f.addEventListener(Event.COMPLETE ,saveY)
				
				f.save( bytesX, "xdisplacemnt.png" );
				
			}
			function saveY()
			{
				
				//_log.text += " saving y map" ;
				var f2:FileReference = new FileReference();
				
				var encoderY:PNGEncoder = new PNGEncoder()
				var bytesY:ByteArray = encoderY.encode( bendyProjCam.mapY);
				
				f2.save( bytesY, "ydisplacement.png" );
				
			}
				
			
		]]>
	</fx:Script>
	<mx:Image x="0" y="0" id="_img"/>
    <mx:Image x="0" y="0" id="_img2"/>
	
	<s:Button x="10" y="39" label="load" click="load()"/>
	<s:Button x="10" y="126" label="bend proj map"  enabled="false" click="bendProjCam()" id="_bendProjButton"/>
	<s:Button x="10" y="68" label="bend cam map" click="bendCamProj()"/>
	<s:Button x="282" y="97" label="interpolate" click="interpolate() ; _bendProjButton.enabled=true "/>
	<mx:Form x="10" y="329" width="215" height="162" dropShadowVisible="true" backgroundAlpha="0.5"  backgroundColor="#707070">
		<mx:FormItem label="zoom">
			<s:HSlider id="_zoom" width="131" maximum="10" minimum="0.0" stepSize="0.1" value="1.0" change="formChange()"/>
		</mx:FormItem>
		<mx:FormItem label="offsetX">
			<s:HSlider id="_offsetX" width="208" minimum="-800" maximum="800" value="0"  change="formChange()"/>
		</mx:FormItem>
		<mx:FormItem label="offSetY" width="263">
			<s:HSlider id="_offsetY" width="210" minimum="-800" maximum="800" value="0"  change="formChange()"/>
		</mx:FormItem>
	</mx:Form>
	<s:Button x="10" y="155" label="double test" click="doubleProj()"/>
	<s:HSlider x="107" y="107" minimum="0.0" maximum="1.0" stepSize="0.01" value="1.0" id="_percentToKeep"/>
	<s:Label x="107" y="97" text="percentage of points to keep"/>
	<s:Button x="10" y="184" label="blur projector map images" click="blurProjMap() "/>
	<s:CheckBox x="10" y="100" label="de-noise" id="_denoise" selected="false"/>
	<s:Button x="10" y="213" label="Show Triangles" click="drawTriangles()"/>
	<s:Button x="10" y="268" label="save X map" click="saveX()"/>
	<s:Button x="102" y="268" label=" save Y map" click="saveY()"/>
	<s:Label x="10" y="255" text="save displacement maps" fontSize="14"/>
	
</s:Application>
