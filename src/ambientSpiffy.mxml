<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600"
			   applicationComplete="watchKeyboard(); loadImages()" xmlns:ns1="*" viewSourceURL="srcview/index.html">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import CamMapfilters.gradientRemove;
			
			import ImageStuff.loadImagesXML;
			
			import flash.media.Camera;
			import flash.media.Video;
			
			import mx.collections.ArrayCollection;
			
			import structuredlight.*;
		
			public var cam:Camera;
			public var sandBox:Sandbox3 ;
			public var proj_map:ProjectorMap;
			public var dispMap24:Displacement24;
			public var _states:Array=["camera", "scanning", "displaying","idle"];
			public var state:int = 0;
			public var tmpVid:Video;//this is used to hold the video being displayed. it is for a bug work around.
			
			
			
			
		
			//
			//  
			//
			
			// TODO : a better way to change images
			//
			//[Embed(source="images/chacoPanarama3072Xsomething.jpg")]
			//private var chacoPanarama:Class;
			public var _images:loadImagesXML;
			public var current_image_index:int =0;
			
			public var timeout:uint = 300;
			public var color:uint = 0xdddddd ;
			public var threshHold:uint = 9 ;
			public var coarse:int = 8 ;
			
			public var distortedImage:Bitmap;
			
			public function formChange():void
			{
				timeout = _timeout.value;
				color = _color.value * 0x010101 ;
				threshHold = _thresh_hold.value;
				coarse = Math.pow( 2,  _coarsness.value) ;
			}
			//
			//
			//  KEYBOARD WATCHING
			//
			public function watchKeyboard():void
			{
				dropDown();
				dropUp();
				stage.addEventListener(KeyboardEvent.KEY_UP, keyPressed);
				_log.text = " keyboard being watched ";
			}
			public function loadImages():void
			{
				_images = new loadImagesXML();
			}
			private function keyPressed(e:KeyboardEvent):void
			{

			   _log.text += e.keyCode + " pressed      " ;

				//escape exits dispolay
				if( state == _states.indexOf("displaying") )
				{
					if( e.keyCode == Keyboard.ESCAPE || e.keyCode == Keyboard.SPACE)
					{
						dropUpImage();
						state = states.indexOf("idle");
					}
					if( e.keyCode == Keyboard.RIGHT)
					{
						current_image_index = (current_image_index + 1) % _images.images.length;
						d24Image();
						
					}
					
				}
				else if( e.keyCode == Keyboard.ENTER || e.keyCode == Keyboard.SPACE)
				{
					if( state != _states.indexOf("scanning") && state != _states.indexOf("displaying") )
					{
						startScan();	
						
					}
				}
			}
			
			
			public function goFullScreen( )
			{
				stage.addEventListener(FullScreenEvent.FULL_SCREEN, goBIGhandler)
				stage.displayState = "fullScreen"
				
			}
			
			private function goBIGhandler(e:FullScreenEvent)
			{
				
			}
			//
			//
			//
			// START THE SCANE
			//   this is an event driven dequence of events that goes all the way to displayImage();
			//  the sequence looks like this:
			//   startscan  -> scanDone --> removeGradient ->badgraddone ->makeProjMap -> interpolateDone -> removeTriangles ->trianglesDone ->makeDispMap -> displayImage
			//
			//
			
			public function startScan():void
			{
				_camDisp.stopDisplay();
				state = _states.indexOf("scanning");
				_log.text = " start scan  \n";
				dropDown();
				dropUpImage();
			    _tabs.selectedIndex = 1;
				
				
				sandBox = new Sandbox3( stage, _camDisp.camera, int(stage.width / coarse) , int(stage.height / coarse ));
				sandBox.thresh_hold = threshHold;
				sandBox.white_tone = color;
				sandBox.state_rate= sandBox.TPTimeout = timeout;
				
				sandBox.callibrate();
				
				
				
				sandBox.addEventListener( sandBox._DONE_EVENT_STRING, scanDone); //doesn't work
				
			}
			
			public function scanDone( e:Event):void
			{
			
				progress(20);
				e.target.removeEventListener( e.type, arguments.callee );
				_log.text += " scanDone " + e.type  +" \n";
				//clean up bad gradient
				setTimeout( removeGradient, 1);
			}
			public function removeGradient():void
			{
				if( _gradient_check_box.selected )
				{
					var grad:gradientRemove = new gradientRemove();
					grad.addEventListener( String(grad.DONE_EVENT), badGradDone );
					sandBox.graymap = grad.removeBadGradient( sandBox.graymap);
				}
				else
				{
					setTimeout( makeProj_Map, 10);
				}
			}
			public function badGradDone(e:Event = null):void
			{
				//_tabs.selectedIndex = 0;
				progress(40);
				if(e){
					e.target.removeEventListener( e.type, arguments.callee );
					_log.text += " bad grad done " + e.type +" \n";
				}
				setTimeout( makeProj_Map, 10);
			}
			public function makeProj_Map():void
			{
				_img.source = new Bitmap( sandBox.graymap.makeGrayArrayImage() );
				
				//interpolate
				//
				proj_map = new ProjectorMap( sandBox.graymap );
				proj_map.addEventListener( proj_map.DONE_EVENT_STRING, interpolateDone );	
				proj_map.interpolate(  );
				
			}
			public function interpolateDone(e:Event):void
			{
				progress(60);

				_log.text += " interpolate done " + e.type  +" \n";
				e.target.removeEventListener( e.type, arguments.callee );
				setTimeout(  removeTriangles,10);
			}
			public function removeTriangles():void
			{
				//
				//this function is realy stupid
				//   it should be smarter. 
				var pmf:meshFilter = new meshFilter( proj_map);
				pmf.removeBadBySideLength();	
				pmf.removeBadByAngle();
				pmf.addEventListener( pmf.DONE_EVENT, trianglesDone);	
				pmf.removeBadByAngle();

			}
			public function trianglesDone( e:Event):void
			{
				progress(70);

				_log.text += " interpolate done " + e.type  +" \n";
				e.target.removeEventListener( e.type, arguments.callee );
				setTimeout( makeADispMap,10);
			}
			public function makeADispMap():void
			{
				//
				//make changesPermanent
				makeChangesPermanent();
				//
				// make d24
				dispMap24 = new Displacement24( );
				dispMap24.addEventListener( dispMap24.READY_EVENT, d24Done );
				dispMap24.fromProjectorMap( proj_map);
			
			}
			public function d24Done(e:Event):void
			{
				progress(100);
				_log.text += " displacement map  done " + e.type  +" \n";
				e.target.removeEventListener( e.type, arguments.callee );
				setTimeout( displayImage,500);
				//setTimeout( dropUp, 1500);
			}

			public function displayImage():void
			{
				dropUp();
				cleanUp();
				_log.text += " DISPLAYING IMAGE"; 	
				//dropUp();
				
				d24Image();
				dropImage();
				
				
			}
			public function cleanUp():void
			{
				//set objects to null
				// and hope auto-garbage collect frees them.
				//sandBox = null;//comment out for debugging
				//proj_map = null;
			}
			public function makeChangesPermanent():void
			{
					
			proj_map.triangulation();
			proj_map.fillIn();
					
			}
			
			//
			//
			//  FUNCTIONS TO ADJUST THE GUI
			//
		
			public function progress( percent:int ):void
			{
				_progress.setProgress( Number(percent), 100);
				_progress.label = " COMPUTING  " + percent + "%" ;
			}
			public function dropDown():void
			{
				_dropDown.y = 10;
				_dropDown.height = stage.height - _dropDown.y;
				_dropDown.visible = true;
				_log.visible = true;
				_progress.visible= true;
				
			}
			public function dropUp():void
			{
				_dropDown.height = 1 ;
				_dropDown.visible=false;
				_log.visible = false;
				_progress.visible= false;
			}
			public function dropImage():void
			{	/*	
				_imgBig.scaleContent = false;
				
				_imgBig.width = stage.width;
				_imgBig.height = stage.height;
				
				
				
				_imgDrop.visible =true;
				_imgBig.visible = true;
			*/
			}
			public function dropUpImage():void
			{/*
				_imgDrop.visible = false;
				_imgBig.visible = false;
				_imgBig.scaleContent = true;
				_imgBig.width = 0;
				_imgBig.height = 0;
			*/
				if( stage.getChildByName("distortedIMG") )
				{
					stage.removeChild( stage.getChildByName("distortedIMG") );
				}
				unInitMouse();
				state = _states.indexOf("idle");
				
				_camDisp.startDisplay();
			}
			
			//
			//
			//  D24 DISPLAY STUFF
			//
			

		
			public function d24Image():void
			{
				
				state = _states.indexOf("displaying");
				var bm:Bitmap;
				
				//display chaco
				//bm = new chacoPanarama();
				var bmtmp:Bitmap = _images.images[ current_image_index ];
				var bmWid:int = bmtmp.width;
				var bmHei:int = bmtmp.height;
				if( bmWid < stage.width)
					bmWid = stage.width;
				if( bmHei < stage.height)
					bmHei = stage.height;
				var bmd:BitmapData = new BitmapData(bmWid, bmHei, false, 0x000000);
				bmd.draw( bmtmp.bitmapData.clone());
				bm = new Bitmap( bmd ) ;
				dispMap24.zoom = 0.5; //this is for the chaco , because it's so big.
				
				/*
				var dimensions:Rectangle = new Rectangle(0,0,bm.width,bm.height);
				
				if( dispMap24.mapX.width > dimensions.width )
					dimensions.width = dispMap24.mapX.width;
				if( dispMap24.mapX.height > dimensions.height )
					dimensions.height = dispMap24.mapX.height;
				
				
				var bmd:BitmapData = new BitmapData( dimensions.width, dimensions.height , false);
				bmd.draw(bm);
				bm = new Bitmap(bmd);
				_imgBig.source = bm;
				*/
				if( stage.getChildByName("distortedIMG") )
				{
					stage.removeChild( stage.getChildByName("distortedIMG") );
				}
				stage.addChild( bm).name = "distortedIMG";
				
				d24Changed();
				
				initMouse()
			}
			public function d24Changed():void
			{
				dispMap24.init();
				if( stage.getChildByName("distortedIMG") )
				{
					stage.getChildByName("distortedIMG").filters = [ dispMap24.filter];
				}
				//_imgBig.filters = [ dispMap24.filter ];
			}
			
			
			public function initMouse():void
			{
				stage.addEventListener(MouseEvent.MOUSE_DOWN, mouse_Down);
				stage.addEventListener(MouseEvent.MOUSE_UP, mouse_up);
				stage.addEventListener(MouseEvent.MOUSE_MOVE, mouse_move);
				stage.addEventListener(MouseEvent.MOUSE_WHEEL, mouse_wheel);
			}
			public function unInitMouse():void
			{
				stage.removeEventListener(MouseEvent.MOUSE_DOWN, mouse_Down);
				stage.removeEventListener(MouseEvent.MOUSE_UP, mouse_up);
				stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouse_move);
				stage.removeEventListener(MouseEvent.MOUSE_WHEEL, mouse_wheel);
			}
			//
			//  MOUSE NAVIGATION STUFF
			//
			//
			public var mouseIsDown:Boolean = false;
			public var mouseStart:Point = new Point(0,0);
			public var bendyStart:Point = new Point(0,0)
				
			public function mouse_Down( e:MouseEvent):void
			{//mouse down  ,  mouse down. //send in support
				mouseStart = new Point( e.localX, e.localY);
				mouseIsDown = true;
				if( dispMap24)
				{
					bendyStart = new Point( dispMap24.offsetX, dispMap24.offsetY );
					d24Changed();
				}
				
			}
			public function mouse_up(e:MouseEvent):void
			{
				mouseIsDown = false;
			}
			public function mouse_move(e:MouseEvent):void
			{
				if( mouseIsDown)
				{
					var offsetX:Number = Number( bendyStart.x -( new int(e.localX) - mouseStart.x) );
					var offsetY:Number = Number( bendyStart.y -( new int(e.localY) - mouseStart.y) );
					
					if( dispMap24 )
					{
						dispMap24.offsetX = offsetX;
						dispMap24.offsetY = offsetY;
					
						d24Changed();
					}
				}
				
				
			}
			public function mouse_wheel(e:MouseEvent):void
			{
				//_log.text += " mouse wheel" + _img.scaleX ;
				if( dispMap24)
				{
					if( e.delta > 0 )
					{
						if( dispMap24.zoom < 2.9)
						{
							dispMap24.zoom  += 0.02
						}
					}
					else if( e.delta < -0 )
					{
						if( dispMap24.zoom  > 0.2)
						{
							dispMap24.zoom  -= 0.02 ;
						}
					}
					
					d24Changed();
				}
			}
			
			
			
			//
			//
			var reviewIndex:int = 0;
			function reviewFrames( up:Boolean ):void
			{
				//if( sandBox)
				{
					//if( up)
						reviewIndex ++;
					//else
						//if( reviewIndex > 0 )
							//reviewIndex --;	
					reviewIndex = reviewIndex % sandBox.frames_store.length;
					_img.source = new Bitmap( sandBox.frames_store[ reviewIndex ] );
					_frame_label.text = reviewIndex.toString();
				}
			}
		]]>
	</fx:Script>
	
	
	
	
	<mx:TabNavigator x="10" y="10" width="95%" height="95%" id="_tabs" >
		<s:NavigatorContent label="SELECT CAMERA" width="100%" height="100%">

			<s:Label x="10" y="10" text="Step 1: Choose Camera : " fontSize="20"/>
			<s:Label x="10" y="227" text="Step 3:  press SPACE to start scan." fontSize="20"/>
			<s:Button x="51" y="260" label="scan" width="240" height="52" click="startScan()" chromeColor="#BBE4B6" fontSize="20" fontWeight="bold"/>
			<s:Label x="10" y="82" text="Step 2: Point camera at screen or Image from Projector" height="44" fontSize="20" width="326"/>
			<ns1:camDisplay x="337" y="10" id="_camDisp">
			</ns1:camDisplay>
			<s:Label x="10" y="142" text="STEP 3: " fontSize="20"/>
			<s:Button x="89" y="147" label="Go Full Screen" width="207" height="70" click="goFullScreen()"/>
		</s:NavigatorContent>
		<s:NavigatorContent label="options" width="100%" height="100%">
			<mx:Image x="10" y="10" id="_img"/>

			<mx:Form x="52" y="-3" width="636" height="239" >
				<s:Label text="threshold" width="59" />
				<s:HSlider minimum="0" maximum="255" stepSize="1" value="7" id="_thresh_hold"  width="391" change="formChange()"/>
				<s:Label text="gray color" height="11"/>
				<s:HSlider id="_color" minimum="0" maximum="255" value="228" stepSize="1" width="382" change="formChange()"/>
				<s:Label text="time to change states"/>
				<s:HSlider id="_timeout" minimum="200" maximum="3000" stepSize="100" value="500" change="formChange()"/>
				<s:Label text="coarsness"/>
				<s:Label text="8" id="_coarsness_label" width="57"/>
				<s:HSlider minimum="0" change="_coarsness_label.text=(Math.pow( 2,  _coarsness.value) ).toString() ; formChange()" id="_coarsness" maximum="10" stepSize="1" value="3"/>
				<mx:FormItem>
					<s:CheckBox label="remove wrong gradient" id="_gradient_check_box" selected="true"/>
				</mx:FormItem>
			</mx:Form>
			<s:Button x="7" y="249" label="scan" width="240" height="52" click="startScan()" chromeColor="#BBE4B6" fontSize="20" fontWeight="bold"/>
			<s:Label x="29" y="333" text="review frames"/>
			<s:Button x="63" y="350" label="--&gt;" click="reviewFrames(true);"/>
			<s:Label x="26" y="350" text="0" height="21" width="42" id="_frame_label"/>
		</s:NavigatorContent>
		
	</mx:TabNavigator>
	<s:BorderContainer x="6" y="536" width="98%" height="264" id="_dropDown" 
					   backgroundAlpha="0.8" backgroundColor="#000000" cornerRadius="20" borderWeight="6" 
					   dropShadowVisible="true" color="#FFFFFF" borderColor="#939100"	>
		<s:TextArea x="41" y="104" id="_log" width="811" visible="false" contentBackgroundColor="#555555"> hello </s:TextArea>
		<mx:ProgressBar x="43" y="50" width="809" color="#64FDFF" fontSize="20" id="_progress" visible="false" mode="manual" chromeColor="#2736FF" height="70"/>
	</s:BorderContainer>
	<s:BorderContainer x="0" y="0" width="100%" height="100%" id="_imgDrop" visible="false" backgroundColor="#6D6D6D">
		<mx:Image x="0" y="0" id="_imgBig" visible="false" />
	</s:BorderContainer>
</s:Application>
