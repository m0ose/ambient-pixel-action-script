<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import CamMapfilters.gradientRemove;
			
			import flash.media.Camera;
			import flash.media.Video;
			
			import mx.collections.ArrayCollection;
			
			import structuredlight.*;
			
		
			public var cam:Camera;
			public var sandBox:Sandbox3 ;
			public var proj_map:ProjectorMap;
			public var dispMap24:Displacement24;
	
			public var cam_resolutions:ArrayCollection = new ArrayCollection(
				[ {label:"640 x 480", width:640, height:480}, 
					{label:"320 x 240", width:320, height:240}, 
					{label:"160 x 120", width:160, height:120}
				]
			);
			
			
			public function load_camera(e:Event=null):void
			{
				cam = Camera.getCamera( camlist.selectedIndex.toString() )
				
				var wid:int = 620;
				var hei:int = 480;
				if(resolution_form){
					wid = resolution_form.selectedItem.width;
					hei = resolution_form.selectedItem.height;
					cam.setMode( wid, hei, 60);
					_vid.width = wid;
					_vid.height = hei;
				}
			    if( cam){
					_vid.attachCamera( cam);
				}
			}
			
			//
			//  
			//
			var timeout:uint = 300;
			var color:uint = 0xdddddd ;
			var threshHold:uint = 9 ;
			var coarse:int = 8 ;
			
			function formChange()
			{
				var timeout:uint = _timeout.value;
				var color:uint = _color.value * 0x010101 ;
				var threshHold:uint = _thresh_hold.value;
				var coarse:int = Math.pow( 2,  _coarsness.value) ;
			}
			
			//
			//
			//
			// START THE SCANE
			//   this is an event driven dequence of events that goes all the way to displayImage();
			//  the sequence looks like this:
			//   startscan  -> scanDone --> removeGradient ->badgraddone ->makeProjMap -> interpolateDone -> removeTriangles ->trianglesDone ->makeDispMap -> displayImage
			//
			//
			
			function startScan()
			{
				_log.text = " start scan  \n";
				dropDown();
			    _tabs.selectedIndex = 1;
				
				
				sandBox = new Sandbox3( stage, cam, int(stage.width / coarse) , int(stage.height / coarse ));
				sandBox.thresh_hold = threshHold;
				sandBox.white_tone = color;
				sandBox.state_rate= sandBox.TPTimeout = timeout;
				
				sandBox.callibrate();
				
				
				
				sandBox.addEventListener( sandBox._DONE_EVENT_STRING, scanDone); //doesn't work

			}
			
			function scanDone( e:Event)
			{
			
				progress(20);
				e.target.removeEventListener( e.type, arguments.callee );
				_log.text += " scanDone " + e.type  +" \n";
				//clean up bad gradient
				setTimeout( removeGradient, 1);
			}
			function removeGradient()
			{
				
				var grad:gradientRemove = new gradientRemove();
				grad.addEventListener( String(grad.DONE_EVENT), badGradDone );
				sandBox.graymap = grad.removeBadGradient( sandBox.graymap);
			
				//setTimeout( badGradDone, 3000);
			
			}
			function badGradDone(e:Event = null)
			{
				//_tabs.selectedIndex = 0;
				progress(40);

				e.target.removeEventListener( e.type, arguments.callee );
				setTimeout( makeProj_Map, 10);
				_log.text += " bad grad done " + e.type +" \n";
			}
			function makeProj_Map()
			{
				_img.source = new Bitmap( sandBox.graymap.makeGrayArrayImage() );
				
				//interpolate
				//
				proj_map = new ProjectorMap( sandBox.graymap );
				proj_map.addEventListener( proj_map.DONE_EVENT_STRING, interpolateDone );	
				proj_map.interpolate(  );
				
			}
			function interpolateDone(e:Event)
			{
				progress(60);

				_log.text += " interpolate done " + e.type  +" \n";
				e.target.removeEventListener( e.type, arguments.callee );
				setTimeout(  removeTriangles,10);
			}
			function removeTriangles()
			{
				var pmf:meshFilter = new meshFilter( proj_map);
				pmf.removeBadBySideLength();	
				pmf.addEventListener( pmf.DONE_EVENT, trianglesDone);	
				pmf.removeBadByAngle();

			}
			function trianglesDone( e:Event)
			{
				progress(70);

				_log.text += " interpolate done " + e.type  +" \n";
				e.target.removeEventListener( e.type, arguments.callee );
				setTimeout( makeADispMap,10);
			}
			function makeADispMap()
			{
				//
				//make changesPermanent
				makeChangesPermanent();
				//
				// make d24
				dispMap24 = new Displacement24( );
				dispMap24.addEventListener( dispMap24.READY_EVENT, d24Done );
				dispMap24.fromProjectorMap( proj_map);
			
			}
			public function d24Done(e:Event)
			{
				progress(100);
				_log.text += " displacement map  done " + e.type  +" \n";
				e.target.removeEventListener( e.type, arguments.callee );
				setTimeout( displayImage,500);
			}
			function displayImage()
			{
				
			
				dropUp();
			}
			
			function makeChangesPermanent()
			{
					
			proj_map.triangulation();
			proj_map.fillIn();
					
			}
			function progress( percent:int )
			{
				_progress.setProgress( Number(percent), 100);
				_progress.label = " COMPUTING  " + percent + "%" ;
			}
			function dropDown()
			{
				_dropDown.height = stage.height - 10;
				_log.visible = true;
				_progress.visible= true;
			}
			function dropUp()
			{
				_dropDown.height = 1 ;
				_log.visible = false;
				_progress.visible= false;
			}
		]]>
	</fx:Script>
	
	
	
	
	<mx:TabNavigator x="10" y="10" width="95%" height="95%" id="_tabs" >
		<s:NavigatorContent label="SELECT CAMERA" width="100%" height="100%">
			<mx:VideoDisplay width="320" height="240" 
							 id="_vid" 
							 visible="true"
							 creationComplete="load_camera( event)"  x="337" y="10" contentBackgroundAlpha="1.0"/>
			<mx:ComboBox id="camlist"
						 dataProvider="{Camera.names}"
						 width="200"	
						 selectedIndex="1" 
						 change="load_camera(event)"
						 x="34" y="31"/>
			<s:ComboBox width="197" dataProvider="{cam_resolutions}" selectedIndex="0" id="resolution_form" change="load_camera(event)" x="36" y="58" visible="false"/>

			<s:Label x="10" y="10" text="Step 1: Choose Camera : " fontSize="20"/>
			<s:Label x="10" y="165" text="Step 2:  press SPACE to start scan." fontSize="20"/>
			<s:Button x="51" y="198" label="scan" width="240" height="52" click="startScan()" chromeColor="#BBE4B6" fontSize="20" fontWeight="bold"/>
		</s:NavigatorContent>
		<s:NavigatorContent label="options" width="100%" height="100%">
			<mx:Image x="10" y="10" id="_img"/>

			<mx:Form x="52" y="-3" width="636" height="239" >
				<s:Label text="threshold" width="59" />
				<s:HSlider minimum="0" maximum="255" stepSize="1" value="7" id="_thresh_hold"  width="391" change="formChange()"/>
				<s:Label text="gray color" height="11"/>
				<s:HSlider id="_color" minimum="0" maximum="255" value="228" stepSize="1" width="382" change="formChange()"/>
				<s:Label text="time to change states"/>
				<s:HSlider id="_timeout" minimum="200" maximum="3000" stepSize="100" value="400" change="formChange()"/>
				<s:Label text="coarsness"/>
				<s:Label text="8" id="_coarsness_label" width="57"/>
				<s:HSlider minimum="0" change="_coarsness_label.text=(Math.pow( 2,  _coarsness.value) ).toString() ; formChange()" id="_coarsness" maximum="10" stepSize="1" value="3"/>
			</mx:Form>
			<s:Button x="7" y="249" label="scan" width="240" height="52" click="startScan()" chromeColor="#BBE4B6" fontSize="20" fontWeight="bold"/>
		</s:NavigatorContent>
		
	</mx:TabNavigator>
	<s:BorderContainer x="0" y="0" width="95%" height="1" id="_dropDown" backgroundAlpha="0.90" backgroundColor="#000000">
		<s:TextArea x="41" y="104" id="_log" width="811" visible="false"/>
		<mx:ProgressBar x="43" y="50" width="809" color="#64FDFF" fontSize="20" id="_progress" visible="false" mode="manual" chromeColor="#2736FF"/>
	</s:BorderContainer>
</s:Application>
