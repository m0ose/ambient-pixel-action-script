<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import ImageStuff.ImageStuff;
			
			import MultiProjector.multiProjector;
			
			import flash.display.*;
			import flash.media.*;
			
			import mx.collections.ArrayCollection;
			import mx.graphics.codec.PNGEncoder;
			import mx.utils.ObjectUtil;
			
			import structuredlight.*;
			
			//for loading the camera
			public var cam:Camera
			//public var vid:Video
			public var bmd:BitmapData
			public var current_refresher:Timer 
			
			
			private var fileO:MapFileOpener = new MapFileOpener()
			public var camMap_stitched:CameraProjecterMap2;
			
			public var cam_resolutions:ArrayCollection = new ArrayCollection(
			[ {label:"640 x 480", width:640, height:480}, 
			{label:"320 x 240", width:320, height:240}, 
			{label:"160 x 120", width:160, height:120} ]
			)
			
			
			public function load_camera(e:Event=null):void
			{
			cam = Camera.getCamera( camlist.selectedIndex.toString() )
			
			var wid:int = 320
			var hei:int = 240
			if(resolution_form){
			wid = resolution_form.selectedItem.width
			hei = resolution_form.selectedItem.height
			cam.setMode( wid, hei, 60)
			vidDisp.width = wid
			vidDisp.height = hei
			}
			vidDisp.attachCamera( cam)
			}

			//
			// MULTIPROJECTOR
			//
			public var mp:multiProjector 
			public function projectorsStart( numberOfProjectors,  timeout:int )
			{
				mp = new multiProjector( cam , stage );
				mp.callib_3( _thresh_hold.value , numberOfProjectors , timeout );
			}
			
			
			
			
			
			
			
			//
			// testing related
			//
			public function showImage( n:int = 0)
			{
				if( n >= mp.projector_count)
					return ;
				
				var sb:Sandbox3 = mp.sbList[n] ;
				
				_img.source = new Bitmap( sb.makeImage() );
				
			}

			
			public function showMask( n:int )
			{
				_img.source = new Bitmap(  mp.differences( mp.sbList[n] , 0xff000000 + 0x010101 * _thresh_hold.value ) );
			}
			
			//
			// INTERPOLATION STUFF
			//
			
			public function showInterp( n:int)
			{
				if( projMap_list && n < projMap_list.length)
				{
					var pm:ProjectorMap = projMap_list[ n];
					
					_img.source = new Bitmap( d24.mapX );
				}
			}

		
			var projMap_list:Array = new Array()

			public function interpallHandler():void
			{
				_log.text += " interpolating __" ;
				//TODO destroy old proj maps
				projMap_list = new Array()
				interpolateAll();
			}
			public function interpolateAll():void
			{
				var n:int = projMap_list.length; 
				if( n < mp.sbList.length && n >= 0)
				{
					var sb:Sandbox3 = mp.sbList[ n ];
					var pm:ProjectorMap = new ProjectorMap( sb.graymap) ;
					pm.interpolate( _pointsKept.value );
					projMap_list[n] = pm; ;
					_log.text += "\n interpolated : " + n; 
					setTimeout( interpolateAll, 10);
				}
				else
				{
					_log.text += "done interpolating"
				}
				
			}
		
			public function interpolate1( n:int):void
			{
				if( n < mp.sbList.length && n >= 0)
				{
				 	var sb:Sandbox3 = mp.sbList[ n ];
					var pm:ProjectorMap = new ProjectorMap( sb.graymap) ;
					pm.interpolate( _pointsKept.value );
					projMap_list[n] = pm; ;
					_log.text += "\n interpolated : " + n; 
				}
			}
		
			
			
			public function stitch():Displacement24
			{
				 
				var w:int = mp.sbList[0].graymap._screen_width;
				var h:int = mp.sbList[0].graymap._screen_height;

				var resultX:BitmapData = new BitmapData( w , h, false, 0x7fffff );
				var resultY:BitmapData = new BitmapData( w , h, false, 0x7fffff );

				var n_proj:int = mp.projector_count ;
				
				if( projMap_list.length > 1 )
				{
					for( var i:int = 0 ; i < projMap_list.length ; i++ )
					{
						var pm:ProjectorMap = projMap_list[ i];
						var d24:Displacement24 = new Displacement24();
						d24.fromProjectorMap( pm);
						var bmX:BitmapData = d24.mapX;
						var bmY:BitmapData = d24.mapY;
						
						var rect:Rectangle = new Rectangle( i*w /n_proj, 0, w / n_proj, h);
						
						var activeX:ByteArray = bmX.getPixels( rect);
						var activeY:ByteArray = bmY.getPixels( rect);
						activeX.position = 0;
						activeY.position = 0;
						resultX.setPixels( rect, activeX);
						resultY.setPixels( rect, activeY);
						// resultX.fillRect( rect, Math.random() * 0xffffff);
						
					}
				}
				var resultd24:Displacement24 = new Displacement24( resultX, resultY);
					
				_img.source = new Bitmap( resultX);
				
				return resultd24 ;
			}
			var d24:Displacement24
			public function stitchAndDisplay():void
			{
				d24 = stitch();
				_img2.source = new Bitmap( d24.quickBMP( stage.width, stage.height) );
				d24.init();
				
				//vidDisp.filters = [d24.filter]
				_img2.filters = [d24.filter];
			}
			
			public function imageSave( n:String):void
			{
				var f2:FileReference = new FileReference();
				
				var encoder:PNGEncoder = new PNGEncoder()

				if( n=="x")
				{
					var bytesX:ByteArray = encoder.encode( d24.mapX);
					
					f2.save( bytesX, "xdisplacement.png" );
				}
				else if ( n=="y")
				{
					var bytesY:ByteArray = encoder.encode( d24.mapY);
				
					f2.save( bytesY, "ydisplacement.png" );
				}
			}

		]]>
	</fx:Script>
	
	
	<mx:Text text="note: bug. this video must be displayed at least once in order for the video to start capturing" x="39" y="294"/>
    <mx:Image x="422" y="37" id="_img"/>	
	<mx:VideoDisplay width="320" height="240" 
					 id="vidDisp" 
					 visible="true"
					 creationComplete="load_camera( event)"  x="14" y="40" contentBackgroundAlpha="1.0"/>
    <mx:Image x="0" y="0" id="_img2"/>
	<mx:Text text="Choose a camera. there are {camlist.dataProvider.length} camera(s)"  x="14" y="14"/>
	<s:Button x="483" y="408" label="  projector callib" click="projectorsStart(_number_of_projectors.value, _timeout.value)"/>
	
	<s:NumericStepper x="10" y="408" minimum="1" maximum="10" stepSize="1" id="_number_of_projectors" value="3"/>
	<s:TextArea x="330" y="437" width="283" id="_log" />
	
	<s:NumericStepper x="98" y="437" id="_sbImage_num" minimum="0" maximum="10" stepSize="1"/>
	<s:Button x="10" y="439" label="show Image" click="showImage( _sbImage_num.value)"/>
	<s:Button x="10" y="570" label="show displacement map" click="showInterp(  _sbImage_num.value)"/>

	<s:HSlider x="78" y="408" minimum="0" maximum="255" stepSize="1" value="14" id="_thresh_hold" />
	<s:Label x="78" y="388" text="threshold" width="59" />
	<s:Button x="159" y="439" label="show Mask" click="showMask( _sbImage_num.value )"/>
	<mx:ComboBox id="camlist"
				 dataProvider="{Camera.names}"
				 width="200"	
				 selectedIndex="1" 
				 change="load_camera(event)"
				 x="10" y="318"/>
	<s:ComboBox width="188" dataProvider="{cam_resolutions}" selectedIndex="1" id="resolution_form" change="load_camera(event)" x="10" y="341"/>
	
	<s:Button x="6" y="496" label="interpolate 0" click="interpolate1(0)"/>
	<s:Button x="140" y="541" label="stitch" click="stitch()"/>

	<s:Button x="210" y="541" label="and display" click="stitchAndDisplay()"/>
	<s:HSlider x="209" y="408" id="_timeout" minimum="200" maximum="3000" stepSize="100" value="1000"/>
	<s:Label x="209" y="388" text="time to change states"/>		<s:Button x="96" y="495" label="interpolate 1" click="interpolate1(1)"/>
	<s:Button x="181" y="495" label="interpolate 2" click="interpolate1(2)"/>
	<s:Button x="167" y="570" label="save X Displacement" click="imageSave('x') " />
	<s:Button x="252" y="570" label="save Y Displacement" click="imageSave('y') "/>
	<s:Button x="10" y="467" label="interpolate All" click="interpallHandler()"/>
	<s:HSlider x="354" y="408" id="_pointsKept" minimum="0.0" maximum="1.0" stepSize="0.05" value="0.8"/>
	<s:Label x="355" y="388" text="percent points to keep"/>
</s:Application>
