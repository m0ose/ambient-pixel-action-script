<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import CamMapfilters.gradientRemove;
			
			import com.nodename.Delaunay.Triangle;
			import com.nodename.Delaunay.Voronoi;
			
			import mx.charts.LineChart;
			import mx.collections.ArrayCollection;
			import mx.graphics.codec.PNGEncoder;
			
			import structuredlight.CameraProjecterMap2;
			import structuredlight.Displacement24;
			import structuredlight.MapFileOpener;
			import structuredlight.ProjectorMap;
			import structuredlight.Reversemap;
			
			var cam_map:CameraProjecterMap2;
			var rev_map:Reversemap;
			var fileO:MapFileOpener;
			var proj_map:ProjectorMap;
			
			function load()
			{
				fileO = new MapFileOpener();
				fileO.importMap()
				fileO.addEventListener( "loaded Map", loaded)
			}
			function loaded(e:Event = null)
			{
				//rev_map = new Reversemap( fileO.cam_map)
				cam_map = fileO.cam_map
				_log.text = " NEW Cam map loaded \n " + cam_map.dumpParameters();
			}
			
			
			function reverse()
			{
				rev_map = new Reversemap( cam_map) ;
				rev_map.reverse();
				
				_img.source = new Bitmap( rev_map.display_rev_map() );
			}
			function showMap()
			{
				var bm:Bitmap = new Bitmap( cam_map.makeGrayArrayImage() );
				bm.scaleX = cam_map._screen_width / cam_map._cam_width;
				bm.scaleY = cam_map._screen_height / cam_map._cam_height;
				
				_img.source = bm;
				
			}
			function interpolate()
			{
				proj_map = new ProjectorMap( cam_map);
				proj_map.interpolate( _denoise.selected , _percentPoints.value );
				
				if( !rev_map)
					rev_map= proj_map.rev_map;
			}
			function drawTriangles():BitmapData
			{
				var bm:BitmapData = rev_map.display_rev_map() ;
				
				var triad = proj_map.triad ;
				
				var s:Shape = new Shape();
				s.graphics.lineStyle(1, 0xff0000 );
				for each( var tr:Triangle in triad._triangles)
				{
					var p1:Point = tr.sites[0].coord ;
					var p2:Point = tr.sites[1].coord ;
					var p3:Point = tr.sites[2].coord ;	
						
					s.graphics.moveTo( p1.x, p1.y ) ;
					s.graphics.lineTo( p2.x, p2.y ) ;
					s.graphics.lineTo( p3.x, p3.y ) ;
					s.graphics.lineTo( p1.x, p1.y ) ;
				}
				
				bm.draw( s) ;
				return bm
			}
			function displayTriangles()
			{
				_img.source = new Bitmap( drawTriangles() ) ;
			}
			
			function analysis()
			{
				var meen_length:Number = 0;
				var biggest:uint = 0;
				var biggestP:Point 
				var n:uint = 0;
				for( var x:int = 0; x < rev_map.width(); x++ )
				{
					for( var y:int=0 ; y < rev_map.height(); y++ )
					{
						if(rev_map.rev_map[x][y])
						{
							if( rev_map.rev_map[x][y].length > 0)
							{
								if( rev_map.rev_map[x][y].length > biggest ){
									biggest = rev_map.rev_map[x][y].length;
									biggestP = new Point(x,y);	
								}
								meen_length += rev_map.rev_map[x][y].length ;					
								n++ ;
							}
						}
					}
				}
				meen_length = meen_length / n;
				_log.text += "\n\n ____ CAMERA PIXELS PER PROJECTOR PIXEL _____" ;
				_log.text += "\n meen list length: " + meen_length ;
				_log.text += " \n biggest list length " + biggest + " at " + biggestP.toString();
				
				//find standard deviation of lengths
				var sigma_length:Number = 0; //standard deviation
				for( var x:int = 0; x < rev_map.width(); x++ )
				{
					for( var y:int=0 ; y < rev_map.height(); y++ )
					{
						if(rev_map.rev_map[x][y])
						{
							if( rev_map.rev_map[x][y].length > 0)
							{
								sigma_length += Math.pow( ( rev_map.rev_map[x][y].length - meen_length ) , 2);
							}
						}
					}
				}
				sigma_length = Math.sqrt( (1/n) * sigma_length );
				_log.text += " \n standard deviation of list lengths : " + sigma_length ;	
				
				// make graph
				var histogram:Array = new Array( 100)
				//var sigma_length:Number = 0; //standard deviation
				for( var x:int = 0; x < rev_map.width(); x++ )
				{
					for( var y:int=0 ; y < rev_map.height(); y++ )
					{
						if( rev_map.rev_map[x][y].length < histogram.length && rev_map.rev_map[x][y].length > 0)
						{
							if( !histogram[ rev_map.rev_map[x][y].length ] )
								histogram[ rev_map.rev_map[x][y].length] = new Number(0);
							histogram[ rev_map.rev_map[x][y].length ] += 1 ; 
						}
					}
				}
		
				//_img.width = stage.width;
				//_img.height = stage.height;
				//linechart1.maxHeight = 200;
				//linechart1.dataProvider = histogram;
				
				// find average distance between pixels in reverse map lists
				var distmeen:Number = 0;	
				var nd:uint = 0
				var distHist:Array = new Array(40);
				for( var x:int = 0; x < rev_map.width(); x++ )
				{
					for( var y:int=0 ; y < rev_map.height(); y++ )
					{
						
						var distances:Number = 0
						if( rev_map.rev_map[x][y].length > 0)
						{
							var center:Point = new Point();
							var lst:Array = rev_map.rev_map[x][y]
							for( var i:int = 0; i < lst.length; i++)
							{
								center.x += lst[i].x
								center.y += lst[i].y;
							}
							center.x = center.x / lst.length;
							center.y = center.y / lst.length;
							
							
							
							for( var i:int = 0; i < lst.length; i++)
							{
								
									var distance:Number = Math.sqrt( Math.pow((center.x - rev_map.rev_map[x][y][i].x),2) + Math.pow((center.y - rev_map.rev_map[x][y][i].y),2) );
									if( distance < 100)	
									{
										distances += distance										
									}
									if( Math.round( distance)  < distHist.length )
									{
										if( !distHist[ Math.round( distance) ])
											distHist[ Math.round( distance) ] = 0;
										distHist[ Math.round( distance) ] += 1;
									}
								
							}
							nd++;
							distances = distances / lst.length;
							distmeen += distances;
						}
						
					}
					
				}
				
				linechart1.dataProvider = distHist;
				distmeen = distmeen / nd;
				_log.text += "\n   meen dist " + distmeen;
				
				_log.text += "\n " + neighborAnalysis();
			}
			
			
			
			/*
			public function gradientDetect():BitmapData
			{
				var result1:BitmapData =  new BitmapData( cam_map._screen_width, cam_map._screen_height, false, 0xffffff)
				
				var prev:Point 
				var curr:Point 
				var global_dx:Number = 0 ;
				var global_dy:Number = 0 ;
				var n:uint = 0;
				
				//get global gradient
				//  X
				for( var y:int= 0; y< cam_map.height() ; y++)
				{
					curr = prev = null
					for ( var x:int= 0; x< cam_map.width() ; x++)
					{
						if( cam_map.getMapXY( x,y).x >= 0)//good point
						{
							if( curr && curr.x > 0 )
								prev = curr.clone();
							curr = cam_map.getMapXY( x,y).clone();
							if( prev && curr && prev.x > 0 && curr.x > 0)
							{
								var dx:Number = curr.x - prev.x;
								if(dx > 0)
								{
									global_dx += +1;
									n++
								}
								else if( dx < 1)
								{
									global_dx += -1;
									n++;
								}
							}
						}
					}
				}
				// Y
				for ( var x:int= 0; x < cam_map.width() ; x++)
				{
					curr = prev = null;
					for( var y:int= 0; y < cam_map.height() ; y++)
					{
						if( cam_map.getMapXY( x, y).y >= 0)// -1 if bad point
						{
							if( curr && curr.x > 0)
								prev = curr.clone();
							curr = cam_map.getMapXY( x,y).clone();
							if( prev && curr && curr.x > 0 && prev.x > 0)
							{
								var dy:Number = curr.y - prev.y;
								if( dy > 0)
								{
									global_dy += 1;
									n++
								}
								else if( dy < 1)
								{
									global_dy += -1;
									n++;
								}
							}
						}
					}
				}
				//
				// Mark these points
				//
				var prev:Point
				var curr:Point
				
				for ( var x:int= 0; x < cam_map.width() ; x++)
				{
					prev = curr = null;
					for( var y:int= 0; y < cam_map.height() ; y++)
					{
						
						if( !prev || cam_map.getMapXY(prev.x , prev.y).x < 0)
						{
							prev = new Point(x,y)
							curr = null;
						}
						else
						{
							curr = new Point(x,y);
							if(  cam_map.getMapXY(curr.x , curr.y).x >= 0)
							{
								//result1.setPixel(x,y, 0xff0000);
								var dy:Number = cam_map.getMapXY(curr.x , curr.y).y - cam_map.getMapXY(prev.x , prev.y).y;
								var good:Boolean = true;
								if( dy < 0 && global_dy > 0)
									good = false;
								if( dy > 0 && global_dy < 0)
									good = false;
								if( !good)
								{
									result1.setPixel( curr.x, curr.y, 0xff0000);
									result1.setPixel( prev.x, prev.y, 0x00ff00);
									prev = curr = null;
								}
								else
								{
									prev = curr.clone()
								}
							}
						}
					}
				}
				for( var y:int= 0; y < cam_map.height() ; y++)
				{
					prev = curr = null;
					for ( var x:int= 0; x < cam_map.width() ; x++)
					{
						
						if( !prev || cam_map.getMapXY(prev.x , prev.y).x < 0)
						{
							prev = new Point(x,y)
							curr = null;
						}
						else
						{
							curr = new Point(x,y);
							if(  cam_map.getMapXY(curr.x , curr.y).x >= 0)
							{
								//result1.setPixel(x,y, 0xff0000);
								var dx:Number = cam_map.getMapXY(curr.x , curr.y).x - cam_map.getMapXY(prev.x , prev.y).x;
								var good:Boolean = true;
								if( dx < 0 && global_dx > 0)
									good = false;
								if( dx > 0 && global_dx < 0)
									good = false;
								if( !good)
								{
									result1.setPixel( curr.x, curr.y, 0x0000ff);
									result1.setPixel( prev.x, prev.y, 0x00ffff);
									prev = curr = null;
								}
								else{
									prev = curr.clone();
								}
							}
						}
					}
				}
				
				
				_log.text += " global dx " + global_dx + " dy " + global_dy;
				return result1
			}
			
			
			*/
			
			
			
			
			//function gradDetect()
			//{
			////	if( cam_map)
			////		_img.source = new Bitmap( gradientDetect())
			//}
			function removeBadGrad()
			{
				var grad:gradientRemove = new gradientRemove();
				_img.source = new Bitmap( grad.gradientDetect(cam_map) );
				
				cam_map = grad.removeBadGradient(cam_map);
				_log.text += "\n" + grad._log;
					
				
			}
			function logPoint(e:MouseEvent)
			{
				var x:int = e.localX;
				var y:int = e.localY;
			
				var found:Boolean = false;
				
				for ( var x2:int =0 ; x2 < 10 ; x2++)
				{
					for ( var y2:int =0 ; y2 < 10 ; y2++)
					{
						if( x + x2 < rev_map.width() && y + y2< rev_map.height() && x > 0 && y > 0)
						{
							if( rev_map && x < rev_map[x+x2].length && rev_map[x+x2][y+y2] )
							{
									_log.text = "  rev map [x][y] " + rev_map.rev_map[x][y].toString() + "\n" + _log.text; 
									found = true;	
							}
						}
					}
				}
				if( ! found) 
					_log.text += " nothing found at " +x + " ," +y;
						
				
			}
				
			/*function reverseTriangles()
			{    var bm:BitmapData = new BitmapData( cam_map._screen_width, cam_map._screen_height , false, 0x000000);
				
				if( proj_map)
				{
					
					var triad = proj_map.triad ;
					
					var s:Shape = new Shape();
					s.graphics.lineStyle(1, 0xff0000 );
					for each( var tr:Triangle in triad._triangles)
					{
						var p1:Point = tr.sites[0].coord ;
						var p2:Point = tr.sites[1].coord ;
						var p3:Point = tr.sites[2].coord ;	
						
						
						var q1:Point = proj_map.proj_map[ p1.x ] [ p1.y];
						var q2:Point = proj_map.proj_map[ p2.x ] [ p2.y];
						var q3:Point = proj_map.proj_map[ p3.x ] [ p3.y];

						
						s.graphics.moveTo( q1.x, q1.y ) ;
						s.graphics.lineTo( q2.x, q2.y ) ;
						s.graphics.lineTo( q3.x, q3.y ) ;
						s.graphics.lineTo( q1.x, q1.y ) ;
					}
					
					bm.draw( s) ;
					//return bm
				}
				_img.source = new Bitmap(bm);
			}
			*/
			function reverseTriangles()
			{
			    var bm:BitmapData = new BitmapData( cam_map._screen_width, cam_map._screen_height , false, 0x000000);

				if( proj_map)
				{
					var s:Shape = new Shape();
					s.graphics.lineStyle(1, 0xffffff );
					
					
					var camTriads = proj_map.getCameraTriangles();
					for each( var tr:Array in camTriads)
					{
						s.graphics.moveTo( tr[0].x ,tr[0].y);
						s.graphics.lineTo( tr[1].x, tr[1].y);
						s.graphics.lineTo( tr[2].x, tr[2].y);
						s.graphics.lineTo( tr[0].x, tr[0].y);

							
					}
					bm.draw( s);
				}
				_img.source = new Bitmap( bm);
			}
			function tryUVMapping()
			{
				var bm:BitmapData = new BitmapData( cam_map._screen_width, cam_map._screen_height , false, 0x000000);
				
				if( proj_map)
				{
					
					
					var camTriads = proj_map.getCameraTriangles();
					
					
					var vertices:Vector.<Number> = new Vector.<Number>;
					for each( var tr:Array in camTriads)
					{
						//var vertices:Vector.<Number>.push( [tr[0].x , tr[0].y, tr[1].x, tr[1].y, tr[2].x ,tr[2].y] )
						
					//s.graphics.drawTriangles(	
					}
				}
				_img.source = new Bitmap( bm);
			}
			function neighborAnalysis():String
			{
				var avgDist:Number = 0;//average dist in projector map
				var avgCamMapDist = 0;
				var n:Number = 0;
				var histogram:Array = new Array( 200);
				var biggestDist:Number = 0;
				for each( var p:Point in proj_map.mypoints)
				{
					var neighbors:Vector.<Point> = proj_map.triad.neighborSitesForSite(p);
					var cmP:Point = proj_map.proj_map[ p.x][p.y];
					for each( var nb:Point in neighbors)
					{
						var dist:Number = Math.sqrt(Math.pow((nb.x - p.x),2) + Math.pow( nb.y - p.y , 2)  );
						var cmNB:Point = proj_map.proj_map[ nb.x ][ nb.y ];
						var cmDist:Number = Math.sqrt(   Math.pow( cmNB.x - cmP.x , 2)   +   Math.pow( cmNB.y - cmP.y , 2)       );
						n++;
						avgDist += dist;
						avgCamMapDist += cmDist;
						//
						//biggest distance
						if( cmDist > biggestDist)
							biggestDist = cmDist;
						
						//make histogram
						//
						var cmDRound = Math.round(cmDist);
						if( cmDRound < histogram.length){
							if( ! histogram[ cmDRound] ){
								histogram[ cmDRound] = 0;}
							else{
								histogram[ cmDRound] += 1;
							}
						}

						
					}
				}
				
				
				avgDist = avgDist / n;
				avgCamMapDist /= n;
				
				
				//
				//
				// STANDARD DEVIATION
				//get sigma
				var sd:Number = 0;
				for each( p in proj_map.mypoints)
				{
					neighbors= proj_map.triad.neighborSitesForSite(p);
					cmP = proj_map.proj_map[ p.x][p.y];
					for each( nb in neighbors)
					{
						cmNB = proj_map.proj_map[ nb.x ][ nb.y ];
						cmDist = Math.sqrt(   Math.pow( cmNB.x - cmP.x , 2)   +   Math.pow( cmNB.y - cmP.y , 2)       );
						sd += Math.pow(cmDist - avgCamMapDist, 2)/n; 
					}
				}
				sd = Math.sqrt( sd );
				
				
				linechart1.maxHeight = null;
			    linechart1.dataProvider = histogram;
				
	
				var log:String = "  average distance between neighbors in proj map " + avgDist;
				log += "\n average cam map neighbor distance : " + avgCamMapDist;
				log += "\n biggest cam map distance " + biggestDist;
				log += "n="+n+"\n standard deviation of cam map distances " + sd;
				return log;
			}
			
			//
			// This function does good work getting rid of long skinny triangles
			//			Todo: consider using angles instead of lengths
			//				If the angle is really small chances are it is far away from its neighbors. 
			//
			function goodCamTriangles():Vector.<Point>
			{
				//remove 2 sigmas standard deviation  from the median distance from points in the cam map.
				// note: this may not work with all maps.
				
				
				var avgCamMapDist:Number = 0;
				var n:Number = 0;
				
				for each( var p:Point in proj_map.mypoints)
				{
					var neighbors:Vector.<Point> = proj_map.triad.neighborSitesForSite(p);
					var cmP:Point = proj_map.proj_map[ p.x][p.y];
					for each( var nb:Point in neighbors)
					{
						var cmNB:Point = proj_map.proj_map[ nb.x ][ nb.y ];
						var cmDist:Number = Math.sqrt(   Math.pow( cmNB.x - cmP.x , 2)   +   Math.pow( cmNB.y - cmP.y , 2)       );
						n++;
						avgCamMapDist += cmDist;
						
					}
				}
				
				
				avgCamMapDist /= n;
				
				
				//
				//
				// STANDARD DEVIATION
				//get sigma
				var sd:Number = 0;
				for each( p in proj_map.mypoints)
				{
					neighbors= proj_map.triad.neighborSitesForSite(p);
					cmP = proj_map.proj_map[ p.x][p.y];
					for each( nb in neighbors)
					{
						cmNB = proj_map.proj_map[ nb.x ][ nb.y ];
						cmDist = Math.sqrt(   Math.pow( cmNB.x - cmP.x , 2)   +   Math.pow( cmNB.y - cmP.y , 2)       );
						sd += Math.pow(cmDist - avgCamMapDist, 2)/n; 
					}
				}
				sd = Math.sqrt( sd );
				
				var goodCoords:Vector.<Point> = new Vector.<Point>;
				for each( p in proj_map.mypoints)
				{
					neighbors= proj_map.triad.neighborSitesForSite(p);
					cmP = proj_map.proj_map[ p.x][p.y];
					
					var badCount:int = 0 ;
					for each( nb in neighbors)
					{
						cmNB = proj_map.proj_map[ nb.x ][ nb.y ];
						cmDist = Math.sqrt(   Math.pow( cmNB.x - cmP.x , 2)   +   Math.pow( cmNB.y - cmP.y , 2)       );
						// if more than three distances are 
						// i cmDist > meen + 2* standradDeviation /
						if( cmDist > avgCamMapDist + sd  )
							badCount += 1;
						// mark for removal remove.
					}
					if( badCount < 3)
					{
						goodCoords.push( p)
					}
					
					
				}
			
				
				return goodCoords;
			}
			public function goodTrianglesbyAngle():Vector.<Point>
			{
				var good:Vector.<Point> = new Vector.<Point>;
				
				for each( var p:Point in proj_map.mypoints)
				{
					var neighbors:Vector.<Point> = proj_map.triad.neighborSitesForSite(p);
					var cmP:Point = proj_map.proj_map[ p.x][p.y];
					
					var angles:Array = [];
					
					
					for each( var nb:Point in neighbors)
					{
						var cmNB:Point = proj_map.proj_map[ nb.x ][ nb.y ];
						var a:Number = Math.atan2( cmP.y - cmNB.y , cmNB.x - cmP.x);
						a = ( a + 2 * Math.PI ) % (2*Math.PI);
						angles.push( a);
					}
					
					
					if( angles.length > 2)
					{
						angles.sort( Array.NUMERIC );
						
						var anglesNeighbor:Array = [];
						
						for( var na:int = 1 ; na < angles.length; na++)
						{
								if( angles[ na] < angles[na -1])
									_log.text += "\n no good sort "+ angles.toString() + " \n";
								anglesNeighbor.push( angles[na] - angles[na -1] );
						}
						anglesNeighbor.push( (angles[0] + 2*Math.PI ) - angles[ angles.length - 1] );
						
						var biggestAngle:Number = 0;
						var smallestAngle = 2 * Math.PI;
						for each( var a3:Number in anglesNeighbor)
						{
							if( a3 > biggestAngle)
								biggestAngle = a3;
							if( a3 < smallestAngle )
								smallestAngle = a3;
						}
						if( smallestAngle > 0.12  )//&& biggestAngle < (7/8)*Math.PI )
						{
							good.push( p);
						}
					}	
					else
					{
						good.push( p);	
					}
				}
				
				
				
				return good; 
			}
			function removeBadCoords():void
			{
				var good:Vector.<Point> = goodCamTriangles();
				proj_map.triad = new Voronoi( good, null , new Rectangle(0,0, rev_map.width(), rev_map.height() ) )			;
				proj_map.mypoints = good;
				//proj_map.interpolate( _denoise.selected , _percentPoints.value );
			}
			public function removeBadCoordsByAngle():void
			{
				var good:Vector.<Point> = goodTrianglesbyAngle();
				proj_map.triad = new Voronoi( good, null , new Rectangle(0,0, rev_map.width(), rev_map.height() ) )	;
				proj_map.mypoints = good;
			}
			
			public function jiggle( k:Number = 0.1 , t:Number = 900)
			{
				var tmpProjMap:Array = new Array(proj_map.width());
				for (var x:int = 0 ; x < proj_map.width(); x++)
				{
					tmpProjMap = new Array( proj_map.height());
				}
				for( var z:int = 0 ; z < 10; z++)
				{
				for each( var p:Point in proj_map.mypoints)
				{
					var neighbors:Vector.<Point> = proj_map.triad.neighborSitesForSite(p);
					var cmP:Point = proj_map.proj_map[ p.x][p.y];
					var forceSumX:Number = 0; 
					var forceSumY:Number = 0 ; 
					for each( var nb:Point in neighbors)
					{
						var cmNB:Point = proj_map.proj_map[ nb.x ][ nb.y ];
						var cmDist:Number = Math.sqrt(   Math.pow( cmNB.x - cmP.x , 2)   +   Math.pow( cmNB.y - cmP.y , 2)       );
						var projDist:Number = Math.sqrt( Math.pow( nb.x - p.x,2 ) + Math.pow(nb.y - p.y,2) ); 
						var Force:Number = -k *(   projDist - cmDist) ; // F = -k * displacement
						forceSumX += Force*(cmNB.x - cmP.x);
						forceSumY += Force*(cmNB.y - cmP.y);
					}
					//var sumMagnitude:Number = Math.sqrt( forceSumX * forceSumX + forceSumY * forceSumY);
					forceSumX /= t;
					forceSumY /= t;
					
					var pNew:Point = new Point( proj_map.proj_map[p.x][p.y].x + forceSumX ,  proj_map.proj_map[p.x][p.y].y + forceSumY );
					
					//tmpProjMap[ p.x][p.y] = pNew;
					proj_map.proj_map[ p.x][p.y] = pNew;
					
				}
				}
				//proj_map.proj_map = tmpProjMap;
			}
			public function fillInChanges():void			
			{
				proj_map.triangulation();
				proj_map.fillIn();	
			}
			public function saveX():void
			{
				fillInChanges();
				var f:FileReference = new FileReference();
				var d24:Displacement24 = new Displacement24();
				d24.fromProjectorMap( proj_map );
				
				var encoderX:PNGEncoder = new PNGEncoder()
				var bytesX:ByteArray = encoderX.encode( d24.mapX);
				
				
				
				//f.addEventListener(Event.COMPLETE ,saveY)
				
				f.save( bytesX, "xdisplacemnt.png" );
				
			}
			
			public function saveY():void
			{
				fillInChanges()
				//_log.text += " saving y map" ;
				
				var d24:Displacement24 = new Displacement24();
				d24.fromProjectorMap( proj_map);
				
				var f2:FileReference = new FileReference();
				
				var encoderY:PNGEncoder = new PNGEncoder()
				var bytesY:ByteArray = encoderY.encode( d24.mapY);
				
				f2.save( bytesY, "ydisplacement.png" );
				
			}
			
		]]>
	</fx:Script>
	
	
	<mx:Image x="-6" y="0" id="_img" click="logPoint( event)"/>
	<mx:Form x="10" y="40" width="232" height="399" dropShadowVisible="false" contentBackgroundColor="#A7A3A3" contentBackgroundAlpha="1.0" backgroundColor="#585757" backgroundAlpha="0.5">
		<s:Button label="load map" click="load()" />
		<s:Button label="reverse map" click="reverse() "/>
		<s:Button label="show map" click="showMap()" />
		<s:Button label="remove bad gradient detect" click="removeBadGrad();//gradDetect()"/>
		<mx:FormItem label="___INTERPOLATION___">
		</mx:FormItem>
		<mx:FormItem label="percent of points to keep:">
		</mx:FormItem>
		<s:HSlider minimum="0.0" maximum="1.0" id="_percentPoints" value="1.0" stepSize="0.01"/>
		<s:CheckBox label="clean up noise" selected="false" id="_denoise"/>
		<s:Button label="interpolate" click="interpolate() " enabled="true"/>
		<s:Button label="try removing bad triangles" click= "removeBadCoords()"/>
		<s:Button label="show triangles" click="displayTriangles() "/>
		<s:Button label="show OtherTriangles" click = "reverseTriangles()"/>
		<s:Button label="jiggle" click="jiggle()"/>
		<s:Button label="make Image Changes( fillIn )" click="fillInChanges()"/>
		<s:Button label="save X map" click="saveX()"/>
		<s:Button label="save Y map" click="saveY()"/>
	</mx:Form>
	<mx:Form x="10" y="423" width="454" height="173">
		<mx:FormItem>
			<s:Button label="analysis" click="analysis()"/>
		</mx:FormItem>
		<s:TextArea width="268" height="232" id="_log"/>
	</mx:Form>
	<mx:LineChart x="472" y="53" id="linechart1">
		<mx:series>
			<mx:LineSeries displayName="Series 1" yField=""/>
		</mx:series>
	</mx:LineChart>
	<mx:Legend dataProvider="{linechart1}"/>
	<s:Button x="270" y="16" label="good triangles by angles" click=" removeBadCoordsByAngle()"/>
</s:Application>
